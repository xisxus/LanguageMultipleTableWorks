@model ICollection<LanguageInstall.Data.Model.LanguageList>
@{
    ViewData["Title"] = "Install New Language";
}
 <link rel="stylesheet" href="~/css/StyleSheet.css">
<h1>Install New Language</h1>
<h4>Single table</h4>


<p>Select a target language and translation quality. The process might take several minutes.</p>

<form method="post" asp-action="TranslateAll">

    <div class="row">
       
            <div class="col-md-6">
                <div class="form-group">
                    <label for="languageCode">Target Language:</label>
                    <select class="form-control" id="languageCode" name="languageCode" required>
                        <option value="">-- Select a Language --</option>
                    <option value="bn">bangla</option>
                         @foreach (var item in Model)
                        {
                            <option value="@item.LanguageCode">@item.LanguageName</option>
                        }
                    </select>
                </div>
            </div>

        

        <div class="col-md-6">
            <div class="form-group">
                <label for="translationQuality">Translation Quality:</label>
                <select class="form-control" id="translationQuality" name="translationQuality" required>
                    <option value="">-- Select Quality --</option>
                    <option value="Good">Good</option>
                    <option value="Better">Better</option>
                    <option value="Best">Best</option>
                </select>
            </div>
        </div>
    </div>
    

   

    <button type="submit" class="btn btn-primary mt-2">Install Now</button>
</form>







<div class="progress mt-3">
    <div id="progress-bar" class="progress-bar" role="progressbar" style="width: 0%;" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
</div>
<p id="progress-text" class="mt-2">0% completed.</p> 
 <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
<script>
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/progressHub")
        .build();

    connection.on("UpdateProgress", (progress, total) => {
        document.getElementById("progress-bar").style.width = progress + "%";
        document.getElementById("progress-text").innerText = `${progress}% completed out of ${total}`;
    });

    connection.start().catch(err => console.error(err.toString()));
</script>





<!-- Add this popup structure to your view -->
@* <div id="progressPopup" class="popup-overlay" style="display: none;">
    <div class="popup-content">
        <div class="loading-circle">
            <div class="clock">
                <span id="clockTime">00:00:00:000</span>
            </div>
        </div>
        <p id="progressText">Progress: 0%</p>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/microsoft/signalr@latest/dist/browser/signalr.min.js"></script>
<script>
    let startTime;
    let timerInterval;

    // Function to start the timer
    function startClock() {
        startTime = new Date().getTime();
        timerInterval = setInterval(() => {
            const now = new Date().getTime();
            const elapsed = now - startTime;

            const hours = Math.floor(elapsed / (1000 * 60 * 60));
            const minutes = Math.floor((elapsed % (1000 * 60 * 60)) / (1000 * 60));
            const seconds = Math.floor((elapsed % (1000 * 60)) / 1000);
            const milliseconds = elapsed % 1000;

            document.getElementById("clockTime").textContent =
                `${String(hours).padStart(2, "0")}:${String(minutes).padStart(2, "0")}:${String(seconds).padStart(2, "0")}:${String(milliseconds).padStart(3, "0")}`;
        }, 10);
    }

    // Function to stop the timer
    function stopClock() {
        clearInterval(timerInterval);
    }

    // Connect to SignalR hub
    const connection = new signalR.HubConnectionBuilder()
        .withUrl("/progressHub")
        .build();

    connection.on("UpdateProgress", (progress, total) => {
        const progressPercent = Math.round((progress / total) * 100);
        document.getElementById("progressText").textContent = `Progress: ${progressPercent}%`;
    });

    connection.start().catch(err => console.error(err.toString()));

    // Show the popup and start the timer when the form is submitted
    document.querySelector("form").addEventListener("submit", () => {
        document.getElementById("progressPopup").style.display = "flex";
        startClock();
    });

    // Stop the clock and hide the popup on completion
    connection.on("OperationCompleted", () => {
        stopClock();
        document.getElementById("progressPopup").style.display = "none";
        alert("Operation completed successfully!");
    });
</script>
 *@